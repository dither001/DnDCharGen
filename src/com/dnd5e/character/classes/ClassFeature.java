package com.dnd5e.character.classes;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import com.dnd5e.definitions.*;
import com.miscellaneous.util.*;

public enum ClassFeature {
	/*
	 * CLASS FEATURES
	 */
	ABILITY_BONUS_4, ABILITY_BONUS_6, ABILITY_BONUS_8, ABILITY_BONUS_10, ABILITY_BONUS_12, ABILITY_BONUS_14, ABILITY_BONUS_16, ABILITY_BONUS_19,
	// strength bonus
	STR_BONUS_4, STR_BONUS_6, STR_BONUS_8, STR_BONUS_10, STR_BONUS_12, STR_BONUS_14, STR_BONUS_16, STR_BONUS_19,
	// dexterity bonus
	DEX_BONUS_4, DEX_BONUS_6, DEX_BONUS_8, DEX_BONUS_10, DEX_BONUS_12, DEX_BONUS_14, DEX_BONUS_16, DEX_BONUS_19,
	// constitution bonus
	CON_BONUS_4, CON_BONUS_6, CON_BONUS_8, CON_BONUS_10, CON_BONUS_12, CON_BONUS_14, CON_BONUS_16, CON_BONUS_19,
	// intelligence bonus
	INT_BONUS_4, INT_BONUS_6, INT_BONUS_8, INT_BONUS_10, INT_BONUS_12, INT_BONUS_14, INT_BONUS_16, INT_BONUS_19,
	// wisdom bonus
	WIS_BONUS_4, WIS_BONUS_6, WIS_BONUS_8, WIS_BONUS_10, WIS_BONUS_12, WIS_BONUS_14, WIS_BONUS_16, WIS_BONUS_19,
	// charisma bonus
	CHA_BONUS_4, CHA_BONUS_6, CHA_BONUS_8, CHA_BONUS_10, CHA_BONUS_12, CHA_BONUS_14, CHA_BONUS_16, CHA_BONUS_19,

	/*
	 * EXPERTISE
	 */
	EXPERTISE_ATHLETICS, EXPERTISE_ACROBATICS, EXPERTISE_SLEIGHT_OF_HAND, EXPERTISE_STEALTH, EXPERTISE_ARCANA, EXPERTISE_HISTORY, EXPERTISE_INVESTIGATION, EXPERTISE_NATURE, EXPERTISE_RELIGION, EXPERTISE_ANIMAL_HANDLING, EXPERTISE_INSIGHT, EXPERTISE_MEDICINE, EXPERTISE_PERCEPTION, EXPERTISE_SURVIVAL, EXPERTISE_DECEPTION, EXPERTISE_INTIMIDATION, EXPERTISE_PERFORMANCE, EXPERTISE_PERSUASION,
	//
	EXPERTISE_THIEVES_TOOLS,

	/*
	 * GENERIC & SHARED FEATURES
	 */
	FIGHTING_STYLE, EXTRA_ATTACK_1, LANDS_STRIDE, TIMELESS_BODY, EVASION, UNCANNY_DODGE,

	/*
	 * BARBARIAN
	 */
	RAGE, RAGE_PER_DAY_2, RAGE_PER_DAY_3, RAGE_PER_DAY_4, RAGE_PER_DAY_5, RAGE_PER_DAY_6, RAGE_PER_DAY_99, RAGE_BONUS_2, RAGE_BONUS_3, RAGE_BONUS_4, UNARMORED_BARBARIAN, RECKLESS_ATTACK, DANGER_SENSE, FAST_MOVEMENT, FERAL_INSTINCT, BRUTAL_CRITICAL_1, RELENTLESS_RAGE, BRUTAL_CRITICAL_2, PERSISTENT_RAGE, BRUTAL_CRITICAL_3, INDOMITABLE_MIGHT, PRIMAL_CHAMPION,
	// berserker
	FRENZY, MINDLESS_RAGE, INTIMIDATING_PRESENCE, RETALIATION,
	// totem warrior
	SPIRIT_SEEKER, BEAR_SPIRIT_3, EAGLE_SPIRIT_3, WOLF_SPIRIT_3, BEAR_ASPECT_6, EAGLE_ASPECT_6, WOLF_ASPECT_6, SPIRIT_WALKER, BEAR_ATTUNEMENT_14, EAGLE_ATTUNEMENT_14, WOLF_ATTUNEMENT_14,
	/*
	 * BARD
	 */
	// FIXME - unused - BARD_CANTRIPS_2, BARD_CANTRIPS_3, BARD_CANTRIPS_4,
	RITUAL_CASTING_BARD, INSPIRATION_D6, JACK_OF_ALL_TRADES, SONG_OF_REST_D6, INSPIRATION_D8, FONT_OF_INSPIRATION, COUNTERCHARM, SONG_OF_REST_D8, INSPIRATION_D10, MAGICAL_SECRETS_10, SONG_OF_REST_D10, MAGICAL_SECRETS_14, INSPIRATION_D12, SONG_OF_REST_D12, MAGICAL_SECRETS_18, SUPERIOR_INSPIRATION,
	// lore college
	CUTTING_WORDS, MAGICAL_SECRETS_6, PEERLESS_SKILL,
	// valor college
	COMBAT_INSPIRATION, BATTLE_MAGIC,
	/*
	 * CLERIC
	 */
	RITUAL_CASTING_CLERIC, CHANNEL_DIVINITY_1, CHANNEL_DIVINITY_2, CHANNEL_DIVINITY_3, POTENT_SPELLCASTING_CLERIC, TURN_UNDEAD, DIVINE_INTERVENTION_10, DIVINE_INTERVENTION_20, DESTROY_UNDEAD_5, DESTROY_UNDEAD_8, DESTROY_UNDEAD_11, DESTROY_UNDEAD_14, DESTROY_UNDEAD_17,
	// domains
	DIVINE_DOMAIN_DEATH, DIVINE_DOMAIN_KNOWLEDGE, DIVINE_DOMAIN_LIFE, DIVINE_DOMAIN_LIGHT, DIVINE_DOMAIN_NATURE, DIVINE_DOMAIN_TEMPEST, DIVINE_DOMAIN_TRICKERY, DIVINE_DOMAIN_WAR,
	// death
	REAPER, TOUCH_OF_DEATH, INESCAPABLE_DESTRUCTION, DIVINE_STRIKE_DEATH, IMPROVED_REAPER,
	// knowledge
	BLESSINGS_OF_KNOWLEDGE, VISIONS_OF_THE_PAST, KNOWLEDGE_OF_THE_AGES, READ_THOUGHTS,
	// life
	DISCIPLE_OF_LIFE, PRESERVE_LIFE, BLESSED_HEALER, DIVINE_STRIKE_LIFE, SUPREME_HEALING,
	// light
	WARDING_FLARE, RADIANCE_OF_THE_DAWN, IMPROVED_FLARE, CORONA_OF_LIGHT,
	// nature
	CHARM_ANIMALS_AND_PLANTS, DAMPEN_ELEMENTS, DIVINE_STRIKE_NATURE, MASTER_OF_NATURE,
	// tempest
	WRATH_OF_THE_STORM, DESTRUCTIVE_WRATH, THUNDERBOLT_STRIKE, DIVINE_STRIKE_TEMPEST, STORMBORN,
	// trickery
	BLESSING_OF_THE_TRICKSTER, INVOKE_DUPLICITY, TRICKERY_CLOAK, DIVINE_STRIKE_TRICKERY, IMPROVED_DUPLICITY,
	// war
	WAR_PRIEST, GUIDED_STRIKE, WAR_GODS_BLESSING, DIVINE_STRIKE_WAR, AVATAR_OF_BATTLE,
	/*
	 * DRUID
	 */
	RITUAL_CASTING_DRUID, WILD_SHAPE_2, WILD_SHAPE_4, WILD_SHAPE_8, BEAST_SPELLS, ARCHDRUID,
	// land circle
	NATURAL_RECOVERY, CIRCLE_SPELLS_ARCTIC, CIRCLE_SPELLS_COAST, CIRCLE_SPELLS_DESERT, CIRCLE_SPELLS_, CIRCLE_SPELLS_FOREST, CIRCLE_SPELLS_GRASSLAND, CIRCLE_SPELLS_MOUNTAIN, CIRCLE_SPELLS_SWAMP, CIRCLE_SPELLS_UNDERDARK, NATURES_WARD, NATURES_SANCTUARY,
	// moon circle
	COMBAT_WILD_SHAPE, MOON_SHAPE_2, MOON_SHAPE_6, MOON_SHAPE_9, MOON_SHAPE_12, MOON_SHAPE_15, MOON_SHAPE_18, PRIMAL_STRIKE, ELEMENTAL_SHAPE, THOUSAND_FORMS,
	/*
	 * FIGHTER
	 */
	SECOND_WIND, ACTION_SURGE_2, ACTION_SURGE_17, EXTRA_ATTACK_2, EXTRA_ATTACK_3, INDOMITABLE_1, INDOMITABLE_2, INDOMITABLE_3,
	// fighting style
	STYLE_ARCHERY, STYLE_DEFENSE, STYLE_DUELING, STYLE_GREAT_WEAPON, STYLE_PROTECTION, STYLE_TWO_WEAPON,
	// champion
	IMPROVED_CRITICAL, REMARKABLE_ATHLETE, ADDITIONAL_FIGHTING_STYLE, SUPERIOR_CRITICAL, SURVIVOR,
	// battle master
	COMBAT_SUPERIORITY, STUDENT_OF_WAR, KNOW_YOUR_ENEMY, RELENTLESS_FIGHTER, SUPERIORITY_DICE_4, SUPERIORITY_DICE_5, SUPERIORITY_DICE_6, SUPERIORITY_D8, SUPERIORITY_D10, SUPERIORITY_D12,
	// maneuvers
	COMMANDERS_STRIKE, DISARMING_ATTACK, DISTRACTING_STRIKE, EVASIVE_FOOTWORK, FEINTING_ATTACK, GOADING_ATTACK, LUNGING_ATTACK, MANEUVERING_ATTACK, MENACING_ATTACK, PARRY, PRECISION_ATTACK, PUSHING_ATTACK, RALLY, RIPOSTE, SWEEPING_ATTACK, TRIP_ATTACK,
	// eldritch knight
	WEAPON_BOND, WAR_MAGIC, ELDRITCH_STRIKE, ARCANE_CHARGE, IMPROVED_WAR_MAGIC,
	/*
	 * MONK
	 */
	UNARMORED_MONK, MARTIAL_ARTS_D4, MARTIAL_ARTS_D6, MARTIAL_ARTS_D8, MARTIAL_ARTS_D10, MONK_MOVE_2, MONK_MOVE_6, MONK_MOVE_10, MONK_MOVE_14, MONK_MOVE_18, WALL_RUNNING, DEFLECT_MISSILES, SLOW_FALL, KI_STRIKE, STILLNESS_OF_MIND, PURITY_OF_BODY, TONGUE_OF_SUN_MOON, PERFECT_SELF,
	// ki powers
	KI_POWERS, FLURRY_OF_BLOWS, PATIENT_DEFENSE, STEP_OF_THE_WIND, STUNNING_STRIKE, DIAMOND_SOUL, EMPTY_BODY,
	// open hand
	OPEN_HAND_TECHNIQUE, WHOLENESS_OF_BODY, TRANQUILITY, QUIVERING_PALM,
	// shadow
	SHADOW_ARTS, SHADOW_STEP, SHADOW_CLOAK, OPPORTUNIST,
	// four elements
	ELEMENTAL_ATTUNEMENT, FANGS_OF_FIRE_SNAKE, FIST_OF_FOUR_THUNDERS, FIST_OF_UNBROKEN_AIR, RUSH_OF_GALE_SPIRITS, SHAPE_OF_FLOWING_RIVER, SWEEPING_CINDER_STRIKE, WATER_WHIP, CLENCH_OF_NORTH_WIND_6, GONG_OF_THE_SUMMIT_6, ETERNAL_MOUNTAIN_11, FLAMES_OF_PHOENIX_11, MIST_STANCE_11, RIDE_THE_WIND_11, BREATH_OF_WINTER_17, RIVER_OF_HUNGRY_FLAME_17, WAVE_OF_ROLLING_EARTH_17,
	/*
	 * PALADIN
	 */
	DIVINE_SENSE, LAY_ON_HANDS, DIVINE_SMITE, DIVINE_HEALTH, AURA_OF_PROTECTION, AURA_OF_COURAGE, IMPROVED_SMITE, CLEANSING_TOUCH, IMPROVED_AURA_18,
	// devotion
	SACRED_WEAPON, TURN_THE_UNHOLY, AURA_OF_DEVOTION, PURITY_OF_SPIRIT, HOLY_NIMBUS,
	// ancients
	NATURES_WRATH, TURN_THE_FAITHLESS, AURA_OF_WARDING, UNDYING_SENTINEL, ELDER_CHAMPION,
	// vengeance
	ABJURE_ENEMY, VOW_OF_ENMITY, RELENTLESS_AVENGER, SOUL_OF_VENGEANCE, AVENGING_ANGEL,
	// oathbreaker
	CONTROL_UNDEAD, DREADFUL_ASPECT, AURA_OF_HATE, SUPERNATURAL_RESISTANCE, DREAD_LORD,
	/*
	 * RANGER
	 */
	FAVORED_ENEMY, NATURAL_EXPLORER, PRIMEVAL_AWARENESS, HIDE_IN_PLAIN_SIGHT, VANISH, FERAL_SENSES, FOE_SLAYER,
	// enemies
	ENEMY_ABERRATIONS, ENEMY_BEASTS, ENEMY_CELESTIALS, ENEMY_CONSTRUCTS, ENEMY_DRAGONS, ENEMY_ELEMENTALS, ENEMY_FEY, ENEMY_FIENDS, ENEMY_GIANTS, ENEMY_MONSTROSITIES, ENEMY_OOZES, ENEMY_PLANTS, ENEMY_UNDEAD,
	// terrain
	EXPLORER_ARCTIC, EXPLORER_COAST, EXPLORER_DESERT, EXPLORER_FOREST, EXPLORER_GRASSLAND, EXPLORER_MOUNTAIN, EXPLORER_SWAMP, EXPLORER_UNDERDARK,
	// hunter
	COLOSSUS_SLAYER, GIANT_KILLER, HORDE_BREAKER, ESCAPE_THE_HORDE, MULTIATTACK_DEFENSE, STEEL_WILL, VOLLEY, WHIRLWIND_ATTACK, STAND_AGAINST_THE_TIDE,
	// beast master
	RANGERS_COMPANION, BEAST_TRAINING, BESTIAL_FURY, SHARE_SPELLS,
	/*
	 * ROGUE
	 */
	SNEAK_ATTACK_1, SNEAK_ATTACK_2, SNEAK_ATTACK_3, SNEAK_ATTACK_4, SNEAK_ATTACK_5, SNEAK_ATTACK_6, SNEAK_ATTACK_7, SNEAK_ATTACK_8, SNEAK_ATTACK_9, SNEAK_ATTACK_10, CUNNING_ACTION, RELIABLE_TALENT, BLINDSENSE, SLIPPERY_MIND, ELUSIVE, STROKE_OF_LUCK,
	// thief
	FAST_HANDS, SECOND_STORY_WORK, SUPREME_SNEAK, USE_MAGIC_DEVICE, THIEFS_REFLEXES,
	// assassin
	ASSASSINATE, INFILTRATION_EXPERTISE, IMPOSTOR, DEATH_STRIKE,
	// arcane trickster
	MAGE_HAND_LEGERDEMAIN, MAGICAL_AMBUSH, VERSATILE_TRICKSTER, SPELL_THIEF,
	/*
	 * SORCERER
	 */
	FONT_OF_MAGIC, FLEXIBLE_CASTING, SORCEROUS_RESTORATION,
	// metamagic
	CAREFUL_SPELL, DISTANCE_SPELL, EMPOWERED_SPELL, EXTENDED_SPELL, HEIGHTENED_SPELL, QUICKENED_SPELL, SUBTLE_SPELL, TWINNED_SPELL,
	// draconic
	ANCESTRY_FIRE, ANCESTRY_COLD, ANCESTRY_LIGHTNING, ANCESTRY_ACID, ANCESTRY_POISON, DRACONIC_RESILIENCE, ELEMENTAL_AFFINITY, DRAGON_WINGS, DRACONIC_PRESENCE,
	// wild magic
	WILD_MAGIC_SURGE, TIDES_OF_CHAOS, BEND_LUCK, CONTROLLED_CHAOS, SPELL_BOMBARDMENT,
	/*
	 * WARLOCK
	 */
	PACT_OF_THE_CHAIN, PACT_OF_THE_BLADE, PACT_OF_THE_TOME, WARLOCK_SLOT_1, WARLOCK_SLOT_2, WARLOCK_SLOT_3, WARLOCK_SLOT_4, MYSTIC_ARCANUM_11, MYSTIC_ARCANUM_13, MYSTIC_ARCANUM_15, MYSTIC_ARCANUM_17, ELDRITCH_MASTER,
	// invocations
	ARMOR_OF_SHADOWS, BEAST_SPEECH, BEGUILING_INFLUENCE, DEVILS_SIGHT, ELDRITCH_SIGHT, EYES_OF_THE_KEEPER, FIENDISH_VIGOR, GAZE_OF_TWO_MINDS, MASK_OF_MANY_FACES, MISTY_VISIONS, THIEF_OF_FIVE_FATES, MIRE_OF_THE_MIND_5, ONE_WITH_SHADOWS_5, SIGN_OF_ILL_OMEN_5, BEWITCHING_WHISPERS_7, DREADFUL_WORD_7, SCULPTOR_OF_FLESH_7, ASCENDANT_STEP_9, MINIONS_OF_CHAOS_9, OTHERWORLDLY_LEAP_9, WHISPERS_OF_THE_GRAVE_9, MASTER_OF_MYRIAD_FORMS_15, VISIONS_OF_DISTANT_REALMS_15, WITCH_SIGHT_15,
	// prereqs
	AGONIZING_BLAST, BOOK_OF_ANCIENT_SECRETS, ELDRITCH_SPEAR, REPELLING_BLAST, VOICE_OF_THE_CHAIN_MASTER, THIRSTING_BLADE_5, LIFEDRINKER_12, CHAINS_OF_CARCERI_15,
	// fey pact
	FEY_PRESENCE, MISTY_ESCAPE, BEGUILING_DEFENSES, DARK_DELIRIUM,
	// fiend pact
	DARK_ONES_BLESSING, DARK_ONES_OWN_LUCK, FIENDISH_RESILIENCE, HURL_THROUGH_HELL,
	// eldritch pact
	AWAKENED_MIND, ENTROPIC_WARD, THOUGHT_SHIELD, CREATE_THRALL,
	/*
	 * WIZARD
	 */
	RITUAL_CASTING_WIZARD, ARCANE_RECOVERY, SPELL_MASTERY, SIGNATURE_SPELL,
	// abjuration
	ABJURATION_SAVANT, ARCANE_WARD, PROJECTED_WARD, IMPROVED_ABJURATION, ABJURER_RESISTANCE,
	// conjuration
	CONJURATION_SAVANT, MINOR_CONJURATION, BENIGN_TRANSPOSITION, FOCUSED_CONJURATION, DURABLE_SUMMONS,
	// divination
	DIVINATION_SAVANT, PORTENT, EXPERT_DIVINATION, THE_THIRD_EYE, GREATER_PORTENT,
	// enchantment
	ENCHANTMENT_SAVANT, HYPNOTIC_GAZE, INSTINCTIVE_CHARM, SPLIT_ENCHANTMENT, ALTER_MEMORIES,
	// evocation
	EVOCATION_SAVANT, SCULPT_SPELLS, POTENT_CANTRIP, EMPOWERED_EVOCATION, OVERCHANNEL,
	// illusion
	ILLUSION_SAVANT, IMPROVED_MINOR_ILLUSION, MALLEABLE_ILLUSIONS, ILLUSORY_SELF, ILLUSORY_REALITY,
	// necromancy
	NECROMANCY_SAVANT, GRIM_HARVEST, UNDEAD_THRALLS, INURED_TO_DEATH, COMMAND_UNDEAD,
	// transmutation
	TRANSMUTATION_SAVANT, MINOR_ALCHEMY, TRANSMUTERS_STONE, SHAPECHANGER, MASTER_TRANSMUTER

	//
	;

	/*
	 * STATIC FIELDS
	 */
	private static final ClassFeature[] EXPERTISE = { ClassFeature.EXPERTISE_ATHLETICS,
			ClassFeature.EXPERTISE_ACROBATICS, ClassFeature.EXPERTISE_SLEIGHT_OF_HAND, ClassFeature.EXPERTISE_STEALTH,
			ClassFeature.EXPERTISE_ARCANA, ClassFeature.EXPERTISE_HISTORY, ClassFeature.EXPERTISE_INVESTIGATION,
			ClassFeature.EXPERTISE_NATURE, ClassFeature.EXPERTISE_RELIGION, ClassFeature.EXPERTISE_ANIMAL_HANDLING,
			ClassFeature.EXPERTISE_INSIGHT, ClassFeature.EXPERTISE_MEDICINE, ClassFeature.EXPERTISE_PERCEPTION,
			ClassFeature.EXPERTISE_SURVIVAL, ClassFeature.EXPERTISE_DECEPTION, ClassFeature.EXPERTISE_INTIMIDATION,
			ClassFeature.EXPERTISE_PERFORMANCE, ClassFeature.EXPERTISE_PERSUASION,
			ClassFeature.EXPERTISE_THIEVES_TOOLS };

	/*
	 * STATIC METHODS
	 */
	public static void setup(Hero actor) {
		switch (actor.getJob()) {
		case BARBARIAN:
			Barbarian.setup(actor);
			break;
		case BARD:
			// FIXME
			Bard.setup(actor);
			break;
		case CLERIC:
			Cleric.setup(actor);
			break;
		case DRUID:
			// FIXME
			JobClass.setup(actor);
			break;
		case FIGHTER:
			// FIXME
			JobClass.setup(actor);
			break;
		case MONK:
			// FIXME
			JobClass.setup(actor);
			break;
		case PALADIN:
			// FIXME
			JobClass.setup(actor);
			break;
		case RANGER:
			// FIXME
			JobClass.setup(actor);
			break;
		case ROGUE:
			// FIXME
			JobClass.setup(actor);
			break;
		case SORCERER:
			// FIXME
			JobClass.setup(actor);
			break;
		case WARLOCK:
			// FIXME
			JobClass.setup(actor);
			break;
		case WIZARD:
			// FIXME
			JobClass.setup(actor);
			break;
		}
	}

	public static void apply(int level, Hero actor) {
		switch (actor.getJob()) {
		case BARBARIAN:
			Barbarian.apply(level, actor);
			break;
		case BARD:
			Bard.apply(level, actor);
			break;
		case CLERIC:
			Cleric.apply(level, actor);
			break;
		case DRUID:
			// FIXME
			JobClass.apply(level, actor);
			break;
		case FIGHTER:
			// FIXME
			JobClass.apply(level, actor);
			break;
		case MONK:
			// FIXME
			JobClass.apply(level, actor);
			break;
		case PALADIN:
			// FIXME
			JobClass.apply(level, actor);
			break;
		case RANGER:
			// FIXME
			JobClass.apply(level, actor);
			break;
		case ROGUE:
			// FIXME
			JobClass.apply(level, actor);
			break;
		case SORCERER:
			// FIXME
			JobClass.apply(level, actor);
			break;
		case WARLOCK:
			// FIXME
			JobClass.apply(level, actor);
			break;
		case WIZARD:
			// FIXME
			JobClass.apply(level, actor);
			break;
		}
	}

	public static ClassFeature matchExpertise(Skill skill) {
		ClassFeature feature = null;
		for (ClassFeature el : EXPERTISE) {
			if (el.toString().endsWith(skill.toString())) {
				feature = el;
				break;
			}
		}

		return feature;
	}

	public static void addRandomExpertise(Hero actor) {
		addRandomExpertise(1, actor);
	}

	public static void addRandomExpertise(int n, Hero actor) {
		// list for potential expertise
		List<ClassFeature> list = new ArrayList<ClassFeature>();
		for (Skill el : actor.getCommonSkills())
			list.add(matchExpertise(el));

		// SPECIAL CASE
		if (actor.getJob().equals(DnDClass.ROGUE))
			list.add(EXPERTISE_THIEVES_TOOLS);

		// remove duplicates
		list.removeAll(Misc.filterSetFor(EXPERTISE, actor.getClassFeatures()));

		if (list.size() > 0) {
			Collections.shuffle(list);
			for (int i = 0; i < n; ++i)
				actor.getClassFeatures().add(list.get(0));
		}
	}

}
